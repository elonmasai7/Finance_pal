{"ast":null,"code":"var _jsxFileName = \"/home/elon/Downloads/minipay-minidapps-main/src/dApps/TransferCUSD.tsx\";\nimport { utils } from \"ethers\";\n\n// Mainnet address of cUSD\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CUSD_ADDRESS = \"0x765DE816845861e75A25fCA122bb6898B8B1282a\";\nconst receiverAddress = \"\";\n\n// DApp to quickly test transfer of cUSD to a specific address using the cUSD contract.\nexport default function TransferCUSD() {\n  async function transferCUSD() {\n    if (window.ethereum) {\n      // Get connected accounts, if not connected request connnection.\n      // returns an array of accounts\n      let accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      // The current selected account out of the connected accounts.\n      let userAddress = accounts[0];\n      let iface = new utils.Interface([\"function transfer(address to, uint256 value)\"]);\n      let calldata = iface.encodeFunctionData(\"transfer\", [receiverAddress, utils.parseEther(\"0.1\") // 10 cUSD - This amount is in wei\n      ]);\n\n      // Send transaction to the injected wallet to be confirmed by the user.\n      let tx = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [{\n          from: userAddress,\n          to: CUSD_ADDRESS,\n          // We need to call the transfer function on the cUSD token contract\n          data: calldata // Information about which function to call and what values to pass as parameters\n        }]\n      });\n\n      // Wait until tx confirmation and get tx receipt\n      let receipt = await tx.wait();\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: transferCUSD,\n    children: \"Transfer cUSD\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 12\n  }, this);\n}\n_c = TransferCUSD;\nvar _c;\n$RefreshReg$(_c, \"TransferCUSD\");","map":{"version":3,"names":["utils","jsxDEV","_jsxDEV","CUSD_ADDRESS","receiverAddress","TransferCUSD","transferCUSD","window","ethereum","accounts","request","method","userAddress","iface","Interface","calldata","encodeFunctionData","parseEther","tx","params","from","to","data","receipt","wait","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/elon/Downloads/minipay-minidapps-main/src/dApps/TransferCUSD.tsx"],"sourcesContent":["import { utils } from \"ethers\";\n\n// Mainnet address of cUSD\nconst CUSD_ADDRESS = \"0x765DE816845861e75A25fCA122bb6898B8B1282a\";\n\nconst receiverAddress = \"\";\n\n// DApp to quickly test transfer of cUSD to a specific address using the cUSD contract.\nexport default function TransferCUSD() {\n    async function transferCUSD() {\n        if (window.ethereum) {\n            // Get connected accounts, if not connected request connnection.\n            // returns an array of accounts\n            let accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n\n            // The current selected account out of the connected accounts.\n            let userAddress = accounts[0];\n\n            let iface = new utils.Interface([\n                \"function transfer(address to, uint256 value)\",\n            ]);\n\n            let calldata = iface.encodeFunctionData(\"transfer\", [\n                receiverAddress,\n                utils.parseEther(\"0.1\"), // 10 cUSD - This amount is in wei\n            ]);\n\n            // Send transaction to the injected wallet to be confirmed by the user.\n            let tx = await window.ethereum.request({\n                method: \"eth_sendTransaction\",\n                params: [\n                    {\n                        from: userAddress,\n                        to: CUSD_ADDRESS, // We need to call the transfer function on the cUSD token contract\n                        data: calldata, // Information about which function to call and what values to pass as parameters\n                    },\n                ],\n            });\n\n            // Wait until tx confirmation and get tx receipt\n            let receipt = await tx.wait();\n        }\n    }\n\n    return <button onClick={transferCUSD}>Transfer cUSD</button>;\n}\n"],"mappings":";AAAA,SAASA,KAAK,QAAQ,QAAQ;;AAE9B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG,4CAA4C;AAEjE,MAAMC,eAAe,GAAG,EAAE;;AAE1B;AACA,eAAe,SAASC,YAAYA,CAAA,EAAG;EACnC,eAAeC,YAAYA,CAAA,EAAG;IAC1B,IAAIC,MAAM,CAACC,QAAQ,EAAE;MACjB;MACA;MACA,IAAIC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;QACzCC,MAAM,EAAE;MACZ,CAAC,CAAC;;MAEF;MACA,IAAIC,WAAW,GAAGH,QAAQ,CAAC,CAAC,CAAC;MAE7B,IAAII,KAAK,GAAG,IAAIb,KAAK,CAACc,SAAS,CAAC,CAC5B,8CAA8C,CACjD,CAAC;MAEF,IAAIC,QAAQ,GAAGF,KAAK,CAACG,kBAAkB,CAAC,UAAU,EAAE,CAChDZ,eAAe,EACfJ,KAAK,CAACiB,UAAU,CAAC,KAAK,CAAC,CAAE;MAAA,CAC5B,CAAC;;MAEF;MACA,IAAIC,EAAE,GAAG,MAAMX,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;QACnCC,MAAM,EAAE,qBAAqB;QAC7BQ,MAAM,EAAE,CACJ;UACIC,IAAI,EAAER,WAAW;UACjBS,EAAE,EAAElB,YAAY;UAAE;UAClBmB,IAAI,EAAEP,QAAQ,CAAE;QACpB,CAAC;MAET,CAAC,CAAC;;MAEF;MACA,IAAIQ,OAAO,GAAG,MAAML,EAAE,CAACM,IAAI,CAAC,CAAC;IACjC;EACJ;EAEA,oBAAOtB,OAAA;IAAQuB,OAAO,EAAEnB,YAAa;IAAAoB,QAAA,EAAC;EAAa;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAChE;AAACC,EAAA,GAvCuB1B,YAAY;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}