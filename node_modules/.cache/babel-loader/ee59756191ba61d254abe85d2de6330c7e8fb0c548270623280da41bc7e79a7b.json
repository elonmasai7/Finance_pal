{"ast":null,"code":"var _jsxFileName = \"/home/elon/Downloads/minipay-minidapps-main/src/dApps/PayTokenFunctionCall.tsx\";\nimport { utils } from \"ethers\";\n\n// Testnet contract address with mint function that transfers 0.01 cUSD for minting tokens.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0xFEeEB43FFC9f947413009864d00Ccf9B9146A55d\";\n\n// A function call that requires transfer of cUSD\nexport default function PayTokenFunctionCall() {\n  async function callMint() {\n    if (window.ethereum) {\n      let accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      // The current selected account out of the connected accounts.\n      let userAddress = accounts[0];\n      let iface = new utils.Interface([\"function mint(address to)\"]);\n      let calldata = iface.encodeFunctionData(\"mint\", [userAddress]);\n\n      // Send transaction to the injected wallet to be confirmed by the user.\n      let tx = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [{\n          from: userAddress,\n          to: CONTRACT_ADDRESS,\n          data: calldata // Information about which function to call and what values to pass as parameters\n        }]\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: callMint,\n    children: \"Call Mint\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 12\n  }, this);\n}\n_c = PayTokenFunctionCall;\nvar _c;\n$RefreshReg$(_c, \"PayTokenFunctionCall\");","map":{"version":3,"names":["utils","jsxDEV","_jsxDEV","CONTRACT_ADDRESS","PayTokenFunctionCall","callMint","window","ethereum","accounts","request","method","userAddress","iface","Interface","calldata","encodeFunctionData","tx","params","from","to","data","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/elon/Downloads/minipay-minidapps-main/src/dApps/PayTokenFunctionCall.tsx"],"sourcesContent":["import { utils } from \"ethers\";\n\n// Testnet contract address with mint function that transfers 0.01 cUSD for minting tokens.\nconst CONTRACT_ADDRESS = \"0xFEeEB43FFC9f947413009864d00Ccf9B9146A55d\";\n\n// A function call that requires transfer of cUSD\nexport default function PayTokenFunctionCall() {\n    async function callMint() {\n        if (window.ethereum) {\n            let accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n\n            // The current selected account out of the connected accounts.\n            let userAddress = accounts[0];\n\n            let iface = new utils.Interface([\"function mint(address to)\"]);\n\n            let calldata = iface.encodeFunctionData(\"mint\", [userAddress]);\n\n            // Send transaction to the injected wallet to be confirmed by the user.\n            let tx = await window.ethereum.request({\n                method: \"eth_sendTransaction\",\n                params: [\n                    {\n                        from: userAddress,\n                        to: CONTRACT_ADDRESS,\n                        data: calldata, // Information about which function to call and what values to pass as parameters\n                    },\n                ],\n            });\n        }\n    }\n\n    return <button onClick={callMint}>Call Mint</button>;\n}\n"],"mappings":";AAAA,SAASA,KAAK,QAAQ,QAAQ;;AAE9B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,gBAAgB,GAAG,4CAA4C;;AAErE;AACA,eAAe,SAASC,oBAAoBA,CAAA,EAAG;EAC3C,eAAeC,QAAQA,CAAA,EAAG;IACtB,IAAIC,MAAM,CAACC,QAAQ,EAAE;MACjB,IAAIC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;QACzCC,MAAM,EAAE;MACZ,CAAC,CAAC;;MAEF;MACA,IAAIC,WAAW,GAAGH,QAAQ,CAAC,CAAC,CAAC;MAE7B,IAAII,KAAK,GAAG,IAAIZ,KAAK,CAACa,SAAS,CAAC,CAAC,2BAA2B,CAAC,CAAC;MAE9D,IAAIC,QAAQ,GAAGF,KAAK,CAACG,kBAAkB,CAAC,MAAM,EAAE,CAACJ,WAAW,CAAC,CAAC;;MAE9D;MACA,IAAIK,EAAE,GAAG,MAAMV,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;QACnCC,MAAM,EAAE,qBAAqB;QAC7BO,MAAM,EAAE,CACJ;UACIC,IAAI,EAAEP,WAAW;UACjBQ,EAAE,EAAEhB,gBAAgB;UACpBiB,IAAI,EAAEN,QAAQ,CAAE;QACpB,CAAC;MAET,CAAC,CAAC;IACN;EACJ;EAEA,oBAAOZ,OAAA;IAAQmB,OAAO,EAAEhB,QAAS;IAAAiB,QAAA,EAAC;EAAS;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AACxD;AAACC,EAAA,GA7BuBvB,oBAAoB;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}